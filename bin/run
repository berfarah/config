#!/usr/bin/env ruby

case ARGV.first
when "encrypt"
  from   = "decrypted"
  to     = "encrypted"
  nodiff = true
when "decrypt"
  from   = "encrypted"
  to     = "decrypted"
  flags  = "-d"
else
  puts "Usage: #{__FILE__} [encrypt|decrypt]"
  exit 1
end

require "fileutils"
require "pathname"

ROOT_PATH = Pathname.new(File.expand_path("../../", __FILE__)).freeze

# Load keys
encryption_keys = Dir[ROOT_PATH.join("*.key")].map do |key_path|
  environment = File.basename(key_path).chomp(".key")
  value = File.read(key_path)

  [environment.to_sym, value]
end.to_h

# Mirror directory structure
Dir[ROOT_PATH.join("#{from}/**/*/")].each do |dir|
  encrypted_dir = dir.sub(from, to)
  FileUtils.mkdir_p(encrypted_dir)
end

class Diff
  attr_reader :destination_file, :backup_file, :diff_file
  def initialize(destination_file)
    @destination_file = destination_file
    @backup_file = destination_file + ".old"
    @diff_file = destination_file.sub("/decrypted/", "/diff/")
    backup
  end

  def self.call(destination_file, noop: false)
    return yield if noop
    instance = new(destination_file)
    yield
    instance.call
  end

  def call
    return unless File.file?(backup_file)
    write_diff unless diff.empty?
    cleanup
  end

  private

  def diff
    @diff ||= `diff #{backup_file} #{destination_file}`
  end

  def backup
    FileUtils.mv(destination_file, backup_file) if File.file?(destination_file)
  end

  def cleanup
    File.delete(backup_file) if File.file?(backup_file)
  end

  def header
    "#{Time.now}\n< Previous\n> Current"
  end

  def create_diff_directory
    FileUtils.mkdir_p(File.dirname(diff_file))
  end

  def write_diff
    create_diff_directory
    File.open(diff_file, "a") do |file|
      file.puts header
      file.puts diff
      file.puts "\n"
    end
  end
end

# Decrypt each environment using the appropriate key
encryption_keys.each do |environment, key|
  Dir[ROOT_PATH.join("#{from}/**/*.yml")].each do |file|
    destination_file = file.sub(from, to)

    Diff.call(destination_file, noop: nodiff) do
      system("openssl enc -aes-256-cbc #{flags} -salt -in #{file} -out #{destination_file} -k #{key}")
    end
  end
end
